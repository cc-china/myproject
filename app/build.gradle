apply plugin: 'com.android.application'
android {
    compileSdkVersion cfgs.compileSdkVersion
    buildToolsVersion cfgs.buildToolsVersion
    defaultConfig {
        applicationId "com.my_project"
        minSdkVersion cfgs.minSdkVersion
        targetSdkVersion cfgs.targetSdkVersion
        versionCode cfgs.versionCode
        versionName cfgs.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        ndk {
            moduleName "testJNI" //生成的so名字
            abiFilters "armeabi", "armeabi-v7a", "x86" //输出指定三种abi体系结构下的so库。
            stl "stlport_static" //打开.c 的 debug , 下面第 4 点会讲到
        }
        // 使用Cmake工具
        externalNativeBuild {
            cmake {
                cppFlags ""
                //生成多个版本的so文件
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
    }

    // 配置CMakeLists.txt路径
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"   // 设置所要编写的c源码位置，以及编译后so文件的名字
        }
    }

    buildTypes {
        release {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
//            jniLibs.srcDirs = ['libs']
//            jni.srcDirs = ['src/main/jni']
        }
    }

    packagingOptions {//加上这写代码
        pickFirst 'META-INF/*'
    }
}



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${cfgs.androidSupportVersion}"
    compile "com.android.support.constraint:constraint-layout:${cfgs.constraintLayout}"
    annotationProcessor "com.github.bumptech.glide:glide:${cfgs.glide}"
    testCompile "junit:junit:${cfgs.junit}"
    compile "com.android.support:design:${cfgs.design}"
    // Android 支持 Rxjava
    // 此处一定要注意使用RxJava2的版本
    compile "io.reactivex.rxjava2:rxjava:${cfgs.rxjava}"
    compile "io.reactivex.rxjava2:rxandroid:${cfgs.rxandroid}"
    // Android 支持 Retrofit
    compile "com.squareup.retrofit2:retrofit:${cfgs.retrofit}"
    // 衔接 Retrofit & RxJava
    // 此处一定要注意使用RxJava2的版本
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${cfgs.retrofit2Rxjava2Adapter}"
    // 支持Gson解析
    compile "com.squareup.retrofit2:converter-gson:${cfgs.converterGson}"
    //    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile "com.squareup.okhttp3:logging-interceptor:${cfgs.loggingInterceptor}"
    compile files('libs/Sunflower.jar')
    compile files('libs/Msc.jar')
    compile project(':XRecycleView')
    compile project(':gsyVideoPlayer')
    compile project(':picture_library')
    compile files('libs/MPAndroidChart-v3.0.2.jar')
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion cfgs.androidSupportVersion
            }
        }
    }
}